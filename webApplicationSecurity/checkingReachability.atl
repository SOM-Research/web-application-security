-- @path ANO=/webApplicationSecurity/metamodels/report.ecore
-- @path PSM=/webApplicationSecurity/metamodels/ServletSecurity.ecore

module checkingReachability;
create OUT : ANO from IN : PSM;

helper def : ALL_URL_PATTERNS : Sequence(PSM!UrlPattern) = 
	PSM!UrlPattern.allInstances();

helper context OclAny def : getSecurityConstraint : PSM!SecurityConstraint =
	if self.oclIsTypeOf(PSM!SecurityConstraint) then
		self
	else
		if self.oclIsTypeOf(PSM!Security) then
			OclUndefined
		else
			self.refImmediateComposite().getSecurityConstraint
		endif
	endif;

helper context PSM!UrlPattern def : isReachable : Boolean =
	let securityConstraint : PSM!SecurityConstraint = self.getSecurityConstraint in
	if securityConstraint.authConstraint.oclIsUndefined() then
		true
	else
		thisModule.ALL_URL_PATTERNS->select(up | up.value = self.value)
									->collect(up | up.getSecurityConstraint)->asSet()->asSequence()
										->collect(sc | sc.authConstraint)
											->reject(ac | ac.oclIsUndefined())
												->collect(ac | ac.roleNameTxt)->reject(rnt | rnt = '*')->flatten()->notEmpty()
	endif;

helper context PSM!Security def : containsSecurityRoles : Boolean =
	not self.role->isEmpty();


rule Security2Anomaly {
	from
		s: PSM!Security
	to
		t: ANO!Report (
			anomalies <- 
							if not s.containsSecurityRoles then
								thisModule.CreateNoDeclaredRoles()
							else
								if thisModule.ALL_URL_PATTERNS->select(up | not up.isReachable)->notEmpty() then
									thisModule.CreateAnomaly(thisModule.ALL_URL_PATTERNS->select(up | not up.isReachable)
																	->collect(up | up.refImmediateComposite())
																		->asSet()->asSequence())
								else
									Sequence{}
								endif
							endif
		)
}

lazy rule CreateNoDeclaredRoles {
	from
		s: OclAny
	to
		t: ANO!Reachability (
			description <- 'Uses * without declaring roles'	
		)
}

lazy rule CreateAnomaly {
	from
		s: OclAny
	to
		t: ANO!Reachability (
	 		description <- 'Resource(s) ' + s->iterate(e ; output : String = '' | output->concat(e.webResourceName + ',')) + ' not reachable',
			unreachableResources <- s
	 	) 
}

