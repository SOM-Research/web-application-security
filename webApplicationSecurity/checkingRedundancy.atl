-- @path ANO=/webApplicationSecurity/metamodels/report.ecore
-- @path PSM=/webApplicationSecurity/metamodels/ServletSecurity.ecore

module checkingRedundancy;
create OUT : ANO from IN : PSM;

helper def : ALL_SECURITY_CONSTRAINTS : Sequence(PSM!SecurityConstraint) = 
	PSM!SecurityConstraint.allInstances();

helper def : ALL_URL_PATTERNS : Sequence(PSM!UrlPattern) =
	PSM!UrlPattern.allInstances();

helper context PSM!SecurityConstraint def : getSecurityConstraintPos : Integer =
	thisModule.ALL_SECURITY_CONSTRAINTS->indexOf(self);


helper context OclAny def : getSecurityConstraint : PSM!SecurityConstraint =
	if self.oclIsTypeOf(PSM!SecurityConstraint) then
		self
	else
		if self.oclIsTypeOf(PSM!Security) then
			OclUndefined
		else
			self.refImmediateComposite().getSecurityConstraint
		endif
	endif;

helper def : removeHead(str : String) : String =
	str.substring(2, str.size());


helper def : treat(path : String) : String =
	if path.startsWith('*') then
		path
	else
		path->concat('/')
	endif;


helper context PSM!UrlPattern def : getPath : String =
	self.value.regexReplaceAll('\\*$', '');


helper context PSM!SecurityConstraint def : getRedundantConstraints : Sequence(PSM!SecurityConstraint) =
	let webResource_urlPatternMatch : Sequence(PSM!SecurityConstraint) = thisModule.ALL_SECURITY_CONSTRAINTS->reject(sc | sc = self)
										->collect(sc | sc.webResourceCollection)->flatten()
											->select(wrc | wrc.urlPattern->exists(up | self.webResourceCollection->exists(swrc | swrc.urlPattern->exists(sup |  
																																								if sup.value.startsWith('*.') then 
																																									up.value.endsWith(thisModule.removeHead(sup.value))
																																								else
																																									thisModule.treat(sup.value) = thisModule.treat(up.value)
																																								endif))))
												->select(wrc | 
																if wrc.httpMethod->notEmpty() then
																	wrc.httpMethod->exists(hm | self.webResourceCollection->exists(swrc | swrc.httpMethod->exists(shm | shm.name = hm.name and shm.omission = hm.omission)))
																else
																	true
																endif
													)->asSet() in
	let webResource_httpMethodMatch : Sequence(PSM!SecurityConstraint) = thisModule.ALL_SECURITY_CONSTRAINTS->reject(sc | sc = self)
										->collect(sc | sc.webResourceCollection)->flatten()
											->select(wrc | wrc.httpMethod->exists(hm | self.webResourceCollection->exists(swrc | swrc.httpMethod->exists(shm | shm.name = hm.name and shm.omission = hm.omission)))) 
												->select(wrc |
																if wrc.urlPattern->notEmpty() then
																	wrc.urlPattern->exists(up | self.webResourceCollection->exists(swrc | swrc.urlPattern->exists(sup | 
																																										if sup.value.startsWith('*.') then 
																																											up.value.endsWith(thisModule.removeHead(sup.value))
																																										else
																																											thisModule.treat(sup.value) = thisModule.treat(up.value)
																																										endif)))
																else
																	true
																endif
												)->asSet() in
	let securityConstraint_roleMatch : Sequence(PSM!SecurityConstraint) = 
										if not self.authConstraint.oclIsUndefined() then
											thisModule.ALL_SECURITY_CONSTRAINTS->reject(sc | sc = self)
												->collect(sc | sc.authConstraint)->reject(ac | ac.oclIsUndefined())
													->select(ac | ac.roleNameTxt->exists(rnt | self.authConstraint.roleNameTxt->exists(srnt | srnt = rnt))) 
														->collect(wr | wr.refImmediateComposite())->asSet()
										else
											Sequence{}
										endif in
	let securityConstraint_roleMatch_all : Sequence(PSM!SecurityConstraint) = 
																				if not self.authConstraint.oclIsUndefined() then
																					if self.authConstraint.roleNameTxt->exists(rnt | rnt = '*') or self.authConstraint.oclIsUndefined() then
																						thisModule.ALL_SECURITY_CONSTRAINTS->reject(sc | sc = self)
																					else
																						Sequence{}
																					endif
																				else
																					thisModule.ALL_SECURITY_CONSTRAINTS->reject(sc | sc = self)
																				endif in
	let intersectionWebResource : Sequence(PSM!SecurityConstraint) = 
																	if webResource_urlPatternMatch->notEmpty() and webResource_httpMethodMatch->notEmpty() then
																		webResource_urlPatternMatch->intersection(webResource_httpMethodMatch)
																	else
																		if webResource_urlPatternMatch->notEmpty() then
																			webResource_urlPatternMatch->asSet()
																		else
																			webResource_httpMethodMatch->asSet()
																		endif
																	endif->collect(wr | wr.refImmediateComposite())->asSet() in
	let intersectionSecConstraints : Sequence(PSM!SecurityConstraint) = intersectionWebResource->intersection(securityConstraint_roleMatch->union(securityConstraint_roleMatch_all)->asSet()) in
	intersectionSecConstraints->asSequence();
													
helper context PSM!SecurityConstraint def : isRedundant : Boolean =
	not self.getRedundantConstraints->isEmpty();

rule Security2Anomaly {
	from
		s: PSM!Security
	to
		t: ANO!Report (
			anomalies <- thisModule.ALL_SECURITY_CONSTRAINTS->select(sc | sc.isRedundant)
																->collect(sc | sc.getRedundantConstraints->collect(sr | Sequence{sc, sr}))
																	->collect(pair | thisModule.CreateAnomaly(pair->flatten()))
		)
}

lazy rule CreateAnomaly {
	from
		pair: OclAny
	to
		t: ANO!Redundancy (
	 		description <- 'Redundancy between security constraints ' + pair->first().getSecurityConstraintPos.toString() + 
							' and ' + pair->last().getSecurityConstraintPos.toString()
	 	) 
}
