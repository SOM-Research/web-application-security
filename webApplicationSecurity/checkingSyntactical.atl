-- @path ANO=/webApplicationSecurity/metamodels/report.ecore
-- @path PSM=/webApplicationSecurity/metamodels/ServletSecurity.ecore

module checkingUndeclaredRole;
create OUT : ANO from IN : PSM;

helper def : ALL_SECURITY_CONSTRAINTS : Sequence(PSM!SecurityConstraint) =
	PSM!SecurityConstraint.allInstances();

helper context PSM!Security def : containsSecurityRoles : Boolean =
	not self.role->isEmpty();

helper context PSM!SecurityConstraint def : containsUndeclaredRole : Boolean =
	if self.authConstraint.oclIsUndefined() then
		false
	else
		if self.authConstraint.roleNameTxt->exists(rnt | rnt = '*') then
			false
		else
			self.authConstraint.roleName->size() <> self.authConstraint.roleNameTxt->size()
		endif
	endif;

helper context PSM!SecurityConstraint def : getUndeclaredRole : String =
	if self.authConstraint.oclIsUndefined() then
		''
	else
		self.authConstraint.roleNameTxt->iterate(name; output : String = '' |
			if self.authConstraint.roleName->exists(ref | ref.name = name) then
				output
			else
				if name <> '*' then
					output->concat(name + ', ')
				else
					output
				endif
			endif
		)
	endif.regexReplaceAll(', $', '');


rule Security2Anomaly {
	from
		s: PSM!Security
	to
		t: ANO!Report (
			anomalies <- 
							if not s.containsSecurityRoles then
								thisModule.createNoRolesAnomaly(s)
							else
								thisModule.ALL_SECURITY_CONSTRAINTS->select(sc | sc.containsUndeclaredRole)
																	->collect(sc | sc.getUndeclaredRole->collect(ur | Sequence{sc, ur}))
																		->collect(pair | thisModule.CreateAnomaly(pair->flatten()))
							endif
		)
}

lazy rule createNoRolesAnomaly {
	from
		x : OclAny
	to
		t: ANO!Syntactical (
			description <- 'No security roles declared'
		)
}

lazy rule CreateAnomaly {
	from
		pair: OclAny
	to
		t: ANO!Redundancy (
	 		description <- 'Missing role: ' + pair->last() + ' in security constraint ' + thisModule.ALL_SECURITY_CONSTRAINTS->indexOf(pair->first()).toString(),
			missedRoles <- secRole
	 	),
		secRole : ANO!SecurityRole (
			roleName <- pair->last()	
		)
}