-- @path ANO=/webApplicationSecurity/metamodels/anomalies.ecore
-- @path PSM=/webApplicationSecurity/metamodels/ServletSecurity.ecore

module checkingUndeclaredRole;
create OUT : ANO from IN : PSM;

helper def : ALL_SECURITY_CONSTRAINTS : Sequence(PSM!SecurityConstraint) =
	PSM!SecurityConstraint.allInstances();

helper context PSM!Security def : containsSecurityRoles : Boolean =
	not self.role->isEmpty();

helper context PSM!SecurityConstraint def : containsUndeclaredRole : Boolean =
	if self.authConstraint.oclIsUndefined() then
		false
	else
		self.authConstraint.roleName->size() <> self.authConstraint.roleNameTxt->size()
	endif;

helper context PSM!SecurityConstraint def : getUndeclaredRole : String =
	if self.authConstraint.oclIsUndefined() then
		''
	else
		self.authConstraint.roleNameTxt->iterate(name; output : String = '' |
			if self.authConstraint.roleName->exists(ref | ref.name = name) then
				output
			else
				output->concat(name + ', ')
			endif
		)
	endif.regexReplaceAll(', $', '');

rule Security2UndeclaredRole {
	from
		s: PSM!Security (not s.containsSecurityRoles)
	to
		t: ANO!UndeclaredRole (
			description <- 'No security roles declared'
		)
}

rule SecurityConstraint2UndeclaredRole {
	from
		s: PSM!SecurityConstraint (s.containsUndeclaredRole)
	to
		t: ANO!UndeclaredRole (
			description <- 'Missing role(s): ' + s.getUndeclaredRole + ' in security constraint ' + thisModule.ALL_SECURITY_CONSTRAINTS->indexOf(s).toString()
		)
	do {
		t.trace <- Sequence{s};	
	}
}