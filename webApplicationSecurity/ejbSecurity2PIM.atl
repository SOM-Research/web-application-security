-- @path PIM=/webApplicationSecurity/metamodels/websecurity.ecore
-- @path EJB=/webApplicationSecurity/metamodels/EjbSecurity.ecore

module ejbSecurity2PIM;
create OUT : PIM from IN : EJB;

helper def: getAllDistinctEjbNames : Sequence(EJB!EjbName) =
	EJB!EjbName.allInstances()->iterate(e ; output : Sequence(EJB!EjbName) = Sequence{} |
		if output->exists(o | o.name = e.name) then
			output
		else
			output->including(e)
		endif
	);

helper context EJB!EjbName def : isInDistinctEjbNames : Boolean =
	thisModule.getAllDistinctEjbNames->exists(ejb | ejb = self);

helper def : getAllRoleNames : Sequence(EJB!RoleName) =
	EJB!RoleName.allInstances();

helper def : getAllMethods : Sequence(EJB!Method) =
	EJB!Method.allInstances();

helper context EJB!EjbName def : getAllMethodsEjbName : Sequence(EJB!Method) =
	thisModule.getAllMethods->select(m | m.ejbName.name = self.name);

helper def : getMethodRoleNameListPairs : Sequence(OclAny) =
	EJB!MethodPermission.allInstances()->collect(mp | mp.method)->flatten()
		->iterate(m ; output : Sequence(OclAny) = Sequence{} |
			output.including(Tuple{method = m, roles = m.refImmediateComposite().roleName})
		);

rule Security2WebApplication {
	from
		s: EJB!Security
	to
		t: PIM!WebApplication (
			aResources <- thisModule.getAllDistinctEjbNames,
			subjects <- thisModule.getAllRoleNames,
			requests <- thisModule.getMethodRoleNameListPairs->collect(pair | thisModule.createMethodRequest(pair))
		)
}

rule RoleName2Role {
	from
		s: EJB!RoleName
	to
		t: PIM!Role (
			name <- s.name	
		)
}

rule EJBName2ActiveResource {
	from
		s: EJB!EjbName (s.isInDistinctEjbNames)
	to
		t: PIM!ActiveResource (
			methods <- s.getAllMethodsEjbName
		)
}

rule Method2Method {
	from
		s: EJB!Method
	to
		t: PIM!Method (
			name <- s.methodName
		)
}

lazy rule createMethodRequest {
	from
		s: OclAny
	to
		t: PIM!MethodRequest (
			method <- s.method,
			subject <- 
						if s.roles.isEmpty() then
							thisModule.getAllRoleNames
						else
							s.roles
						endif
		)
}