-- @path ANO=/webApplicationSecurity/metamodels/report.ecore
-- @path PSM=/webApplicationSecurity/metamodels/ServletSecurity.ecore

module checkingShadowing;
create OUT : ANO from IN : PSM;

helper def : ALL_SECURITY_CONSTRAINTS : Sequence(PSM!SecurityConstraint) =
	PSM!SecurityConstraint.allInstances();

helper def : ALL_URL_PATTERNS : Sequence(PSM!UrlPattern) =
	PSM!UrlPattern.allInstances();

helper context OclAny def : getSecurityConstraint : PSM!SecurityConstraint =
	if self.oclIsTypeOf(PSM!SecurityConstraint) then
		self
	else
		if self.oclIsTypeOf(PSM!Security) then
			OclUndefined
		else
			self.refImmediateComposite().getSecurityConstraint
		endif
	endif;

helper def : treat(path : String) : String =
	if path.startsWith('*') then
		path
	else
		path->concat('/')
	endif;

helper context PSM!UrlPattern def : getPath : String =
	self.value.regexReplaceAll('\\*$', '');

helper context PSM!SecurityConstraint def : getShadowingConstraints : Sequence(PSM!SecurityConstraint) =
	let roles : Sequence(String) =  if self.authConstraint.oclIsUndefined() then Sequence{} else self.authConstraint.roleNameTxt endif in
	let urlPatterns : Sequence(PSM!UrlPattern) = self.webResourceCollection->collect(wrc | wrc.urlPattern)->flatten() in
	thisModule.ALL_URL_PATTERNS->reject(up | up.value = '*')->reject(up | urlPatterns->exists(sup | sup = up))
		->select(up | urlPatterns->exists(sup | thisModule.treat(sup.getPath).startsWith(thisModule.treat(up.getPath))))
			->collect(up | up.getSecurityConstraint)->asSet()->asSequence()->reject(sc | sc.authConstraint.oclIsUndefined())
				->select(sc | sc.authConstraint.roleNameTxt->exists(rnt | rnt = '*'));

helper context PSM!SecurityConstraint def : isShadowed : Boolean =
	self.getShadowingConstraints->notEmpty();

helper def : getShadowedPairs : Sequence(OclAny) =
	thisModule.ALL_SECURITY_CONSTRAINTS->select(sc | sc.isShadowed)->collect(sc | sc.getShadowingConstraints->collect(ssc | Sequence{sc, ssc}));

rule Security2Anomaly {
	from
		s: PSM!Security
	to
		t: ANO!Report (
			anomalies <- thisModule.getShadowedPairs->collect(sp | thisModule.CreateAnomaly(sp))
		)
}

lazy rule CreateAnomaly {
	from
		pair: OclAny
	to
		t: ANO!Shadowing (
	 		description <- 'Security constraint ' + thisModule.ALL_SECURITY_CONSTRAINTS->indexOf(pair->first()).toString() + ' shadowed by security constraint(s) '	+ 
							thisModule.ALL_SECURITY_CONSTRAINTS->indexOf(pair->last()).toString(),
			shadowing <- pair->first(),
			shadowed <- pair->last()
		
	 	) 
}

