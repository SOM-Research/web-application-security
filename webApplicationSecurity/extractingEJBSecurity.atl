-- @path SEC=/webApplicationSecurity/metamodels/EjbSecurity.ecore
-- @nsURI XML=http://www.eclipse.org/MoDisco/Xml/0.1.incubation/XML
-- @nsURI JAVA=http://www.eclipse.org/MoDisco/Java/0.2.incubation/java

module extractingEJBSecurity;
create OUT : SEC from IN : XML, IN2 : JAVA;

------------------------------------
-------------EJB JAR XML------------
------------------------------------
helper context XML!Element def : getAttributes(element_name : String) :  Sequence(XML!Element) =
	self.children->select(c | c.name = element_name);

helper context XML!Element def : getAttribute(element_name : String) : XML!Element =
	self.getAttributes(element_name)->first();
		
helper context XML!Element def : getText : String =
	self.children->select(c | c.oclIsTypeOf(XML!Text))->first().name;

helper context XML!Element def : isIn(element_name : String) : Boolean =
	if self.name = element_name then
		true
	else
		if self.name = 'ejb-jar' then
			false
		else
			self.refImmediateComposite().isIn(element_name)
		endif
	endif;

helper context XML!Element def : get(element_name : String) : XML!Element =
	if self.name = element_name then
		self
	else
		if self.name = 'ejb-jar' then
			OclUndefined
		else
			self.refImmediateComposite().get(element_name)
		endif
	endif;

helper def : getEjbNames : Sequence(XML!Element) =
	XML!Element.allInstances()->select(e | e.name = 'ejb-name')
								->select(e | e.isIn('enterprise-beans'));

helper def : getDistinctEjbName(name : String) : XML!Element =
	thisModule.getEjbNames->select(e | e.getText = name)->first();
			
--retrieve the roles allowed in the xml
helper def : getAllDistinctRolesAllowedInXML : Sequence(OclAny) =
	XML!Element.allInstances()->select(e | e.name = 'assembly-descriptor')->first().children
								->select(c | c.name = 'security-role')
									->collect(c | c.getAttribute('role-name'));

helper def : getDistinctRole(name : String) : OclAny =
	thisModule.getAllDistinctRolesAllowedInXML->select(ra | ra.getText = name)->first();

helper def : getSessionsWithSecurityInfo : Sequence(XML!Element) =
	XML!Element.allInstances()->select(e | e.name = 'role-name')
								->select(e | e.isIn('session'))
									->collect(e | e.get('session'));

helper context XML!Element def: isInSessionWithSecurityInfo : Boolean =
	thisModule.getSessionsWithSecurityInfo->exists(session | self.get('session') = session);

helper context XML!Element def : isSessionWithSecurityInfo : Boolean =
	thisModule.getSessionsWithSecurityInfo->exists(session | self = session);

rule Element2Security {
	from
		s: XML!Element (s.name = 'ejb-jar')
	to
		t: SEC!Security (
			assemblyDescriptor <- s.getAttribute('assembly-descriptor'),
			enterpriseBeans <- s.getAttribute('enterprise-beans')
		)
}

rule Element2EnterpriseBeans {
	from
		s: XML!Element (s.name = 'enterprise-beans')
	to
		t: SEC!EnterpriseBeans (
			session <- s.getAttributes('session')
		)
}

rule Element2Session {
	from
		s: XML!Element (s.name = 'session')
	to
		t: SEC!Session (
			ejbClass <- s.getAttribute('ejb-class'),
			ejbName <- s.getAttribute('ejb-name'),
			securityIdentity <- s.getAttribute('security-identity'),
			securityRoleRef <- s.getAttributes('security-role-ref')
		)
}

rule Element2SecurityRoleRef {
	from
		s : XML!Element (s.name = 'security-role-ref')
	to
		t: SEC!SecurityRoleRef (
			roleName <- thisModule.getDistinctRole(s.getAttribute('role-name').getText),
			roleNameLink <- s.getAttribute('role-name'),
			roleLink <- s.getAttribute('role-link')
		)
}

rule Element2RoleLink {
	from
		s: XML!Element (s.name = 'role-link')
	to
		t: SEC!RoleLink (
			roleName <- thisModule.getDistinctRole(s.getText)
		)
}

rule Element2SecurityIdentity {
	from
		s: XML!Element (s.name = 'security-identity')
	to
		t: SEC!SecurityIdentity (
			runAs <- s.getAttribute('run-as'),
			userCallerIdentity <- s.getAttribute('use-caller-identity')
		)
}

rule Element2UserCallerIdentity {
	from
		s: XML!Element (s.name = 'use-caller-identity')
	to
		t: SEC!UserCallerIdentity ()
}

rule Element2RunAs {
	from
		s: XML!Element (s.name = 'run-as')
	to
		t: SEC!RunAs (
			roleName <- thisModule.getDistinctRole(s.getAttribute('role-name').getText)	
		)
}

rule ElementAssemblyDescriptor {
	from
		s: XML!Element (s.name = 'assembly-descriptor')
	to
		t: SEC!AssemblyDescriptor (
			securityRole <- s.getAttributes('security-role'),
			methodPermission <- s.getAttributes('method-permission'),
			excludeList <- s.getAttribute('exclude-list')
		)
}

rule Element2SecurityRole {
	from
		s: XML!Element (s.name = 'security-role')
	to
		t: SEC!SecurityRole (
			roleName <- s.getAttribute('role-name')
		)
}

rule ElementInSecRoleRef2RoleName {
	from
		s: XML!Element (s.name = 'role-name' and s.isIn('security-role-ref'))
	to
		t: SEC!RoleName (
			name <- s.getText
		)
}

rule ElementInSecRole2RoleName {
	from
		s: XML!Element (s.name = 'role-name' and s.isIn('security-role'))
	to
		t: SEC!RoleName (
			name <- s.getText
		)
}

rule Element2MethodPermission {
	from
		s: XML!Element (s.name = 'method-permission')
	to
		t: SEC!MethodPermission (
			method <- s.getAttributes('method'),
			unchecked <- not s.getAttribute('unchecked').oclIsUndefined(),
			roleName <- s.getAttributes('role-name')->collect(rn | thisModule.getDistinctRole(rn.getText))->flatten()
		)
}

rule Element2Method {
	from
		s: XML!Element (s.name = 'method' and (s.isIn('method-permission') or s.isIn('exclude-list')))
	to
		t: SEC!Method (
			ejbName <- thisModule.getDistinctEjbName(s.getAttribute('ejb-name').getText),
			methodName <- s.getAttribute('method-name').getText,
			methodInf <- s.getAttribute('method-inf'),
			methodParams <- s.getAttribute('method-params')
		)
}

rule Element2EjbClass {
	from
		s: XML!Element (s.name = 'ejb-class' and s.isIn('session'))
	to
		t: SEC!EjbClass (
			name <- s.getText	
		)
}

rule Element2EjbName {
	from
		s: XML!Element (s.name = 'ejb-name' and s.isIn('session'))
	to
		t: SEC!EjbName (
			name <- s.getText	
		)
}

rule Element2ExcludeList {
	from
		s: XML!Element (s.name = 'exclude-list' and s.isIn('assembly-descriptor'))
	to
		t: SEC!ExcludeList (
			method <- s.getAttributes('method')	
		)
}

rule Element2MethodInf {
	from
		s: XML!Element (s.name = 'method-inf' and (s.isIn('method-permission') or s.isIn('exclude-list')))
	to
		t: SEC!MethodInf (
			name <- s.getText	
		)
}

rule Element2MethodParams {
	from
		s: XML!Element (s.name = 'method-params' and (s.isIn('method-permission') or s.isIn('exclude-list')))
	to
		t: SEC!MethodParams (
			methodParam <- s.getAttributes('method-param')
		)
}

rule Element2MethodParam {
	from
		s: XML!Element (s.name = 'method-param' and (s.isIn('method-permission') or s.isIn('exclude-list')))
	to
		t: SEC!MethodParam (
			param <- s.getText	
		)
}
