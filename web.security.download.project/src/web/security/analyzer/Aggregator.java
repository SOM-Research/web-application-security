package web.security.analyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.List;

/**
 * 
 * @author atlanmod
 * This class aggregates the output generated by GitHubProjectServletEBJFinder, that retrieves GitHub projects having security information
 * declared in both servlet and ejb descriptors
 * 
 * ex. template:
 * Aggregator x = new Aggregator();
 * x.aggregate(aggregator_file_path, project_links_to_aggregate);
 * 
 * ex.:
 * Aggregator x = new Aggregator();
 * x.aggregate("./aggr_servlet_ejb_links", "./servlet_ejb_links.txt");
 * 
 */

public class Aggregator {
	
	private List<String> aggregator_list;
	private List<String> to_aggregate;
	
	public Aggregator() {
		this.aggregator_list = new LinkedList<String>();
		this.to_aggregate = new LinkedList<String>();
	}
	
	public void initList(List<String> list, String path) {
		try {
			FileReader reader = new FileReader(path);
			BufferedReader br = new BufferedReader(reader);
			
			String currentLine;
			while ((currentLine = br.readLine()) != null) {
				list.add(currentLine);
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public List<String> findEntriesToAggregate() {
		List<String> toAggregate = new LinkedList<String>();
		for (String candidate : this.to_aggregate) {
			if (!this.aggregator_list.contains(candidate))
				toAggregate.add(candidate);
		}
		return toAggregate;
	}
	
	public void aggregate(String aggregator_path, String file_to_aggregate_path) {
		try {
			this.initList(this.aggregator_list, aggregator_path);
			this.initList(this.to_aggregate, file_to_aggregate_path);
			List<String> toAggregate = this.findEntriesToAggregate();
			
			//if aggregator file does not exist, create it
			File f = new File(aggregator_path);
			if (f.exists())
				f.createNewFile();
			
			PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(aggregator_path, true)));
			for (String s : toAggregate) {
				out.println(s);
			}
			out.close();
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		Aggregator x = new Aggregator();
		x.aggregate("./aggr_servlet_ejb_links", "./servlet_ejb_links.txt");
	}

}
