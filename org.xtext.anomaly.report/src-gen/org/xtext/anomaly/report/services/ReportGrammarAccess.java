/*
* generated by Xtext
*/
package org.xtext.anomaly.report.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ReportGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cAnomaliesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAnomaliesAnomalyParserRuleCall_0 = (RuleCall)cAnomaliesAssignment.eContents().get(0);
		
		//Model:
		//	anomalies+=Anomaly*;
		public ParserRule getRule() { return rule; }

		//anomalies+=Anomaly*
		public Assignment getAnomaliesAssignment() { return cAnomaliesAssignment; }

		//Anomaly
		public RuleCall getAnomaliesAnomalyParserRuleCall_0() { return cAnomaliesAnomalyParserRuleCall_0; }
	}

	public class AnomalyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Anomaly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescrAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescrSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescrAssignment_3.eContents().get(0);
		
		//Anomaly:
		//	"Property" name=STRING "Description" descr=STRING;
		public ParserRule getRule() { return rule; }

		//"Property" name=STRING "Description" descr=STRING
		public Group getGroup() { return cGroup; }

		//"Property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"Description"
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }

		//descr=STRING
		public Assignment getDescrAssignment_3() { return cDescrAssignment_3; }

		//STRING
		public RuleCall getDescrSTRINGTerminalRuleCall_3_0() { return cDescrSTRINGTerminalRuleCall_3_0; }
	}
	
	
	private final ModelElements pModel;
	private final AnomalyElements pAnomaly;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReportGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAnomaly = new AnomalyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.anomaly.report.Report".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	anomalies+=Anomaly*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Anomaly:
	//	"Property" name=STRING "Description" descr=STRING;
	public AnomalyElements getAnomalyAccess() {
		return pAnomaly;
	}
	
	public ParserRule getAnomalyRule() {
		return getAnomalyAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
