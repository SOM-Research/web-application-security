/*
* generated by Xtext
*/
package org.xtext.anomaly.report.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.anomaly.report.services.ReportGrammarAccess;

public class ReportParser extends AbstractContentAssistParser {
	
	@Inject
	private ReportGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.anomaly.report.ui.contentassist.antlr.internal.InternalReportParser createParser() {
		org.xtext.anomaly.report.ui.contentassist.antlr.internal.InternalReportParser result = new org.xtext.anomaly.report.ui.contentassist.antlr.internal.InternalReportParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getAnomalyAccess().getAlternatives(), "rule__Anomaly__Alternatives");
					put(grammarAccess.getShadowingAccess().getGroup(), "rule__Shadowing__Group__0");
					put(grammarAccess.getCompletenessAccess().getGroup(), "rule__Completeness__Group__0");
					put(grammarAccess.getRedundancyAccess().getGroup(), "rule__Redundancy__Group__0");
					put(grammarAccess.getSyntacticalAccess().getGroup(), "rule__Syntactical__Group__0");
					put(grammarAccess.getReachabilityAccess().getGroup(), "rule__Reachability__Group__0");
					put(grammarAccess.getReportAccess().getAnomaliesAssignment(), "rule__Report__AnomaliesAssignment");
					put(grammarAccess.getShadowingAccess().getDescriptionAssignment_1(), "rule__Shadowing__DescriptionAssignment_1");
					put(grammarAccess.getShadowingAccess().getShadowingAssignment_2(), "rule__Shadowing__ShadowingAssignment_2");
					put(grammarAccess.getShadowingAccess().getShadowedAssignment_3(), "rule__Shadowing__ShadowedAssignment_3");
					put(grammarAccess.getCompletenessAccess().getDescriptionAssignment_1(), "rule__Completeness__DescriptionAssignment_1");
					put(grammarAccess.getCompletenessAccess().getMissedMethodAssignment_2(), "rule__Completeness__MissedMethodAssignment_2");
					put(grammarAccess.getCompletenessAccess().getSecurityConstraintAssignment_3(), "rule__Completeness__SecurityConstraintAssignment_3");
					put(grammarAccess.getRedundancyAccess().getDescriptionAssignment_1(), "rule__Redundancy__DescriptionAssignment_1");
					put(grammarAccess.getRedundancyAccess().getContainingAssignment_2(), "rule__Redundancy__ContainingAssignment_2");
					put(grammarAccess.getRedundancyAccess().getContainedAssignment_3(), "rule__Redundancy__ContainedAssignment_3");
					put(grammarAccess.getSyntacticalAccess().getDescriptionAssignment_1(), "rule__Syntactical__DescriptionAssignment_1");
					put(grammarAccess.getSyntacticalAccess().getMissedRolesAssignment_2(), "rule__Syntactical__MissedRolesAssignment_2");
					put(grammarAccess.getReachabilityAccess().getDescriptionAssignment_1(), "rule__Reachability__DescriptionAssignment_1");
					put(grammarAccess.getReachabilityAccess().getUnreachableResourcesAssignment_2(), "rule__Reachability__UnreachableResourcesAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.anomaly.report.ui.contentassist.antlr.internal.InternalReportParser typedParser = (org.xtext.anomaly.report.ui.contentassist.antlr.internal.InternalReportParser) parser;
			typedParser.entryRuleReport();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ReportGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ReportGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
