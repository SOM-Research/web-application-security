/*
* generated by Xtext
*/
grammar InternalReport;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.anomaly.report.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.anomaly.report.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.anomaly.report.services.ReportGrammarAccess;

}

@parser::members {
 
 	private ReportGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ReportGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getAnomaliesAssignment()); }
(rule__Model__AnomaliesAssignment)*
{ after(grammarAccess.getModelAccess().getAnomaliesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnomaly
entryRuleAnomaly 
:
{ before(grammarAccess.getAnomalyRule()); }
	 ruleAnomaly
{ after(grammarAccess.getAnomalyRule()); } 
	 EOF 
;

// Rule Anomaly
ruleAnomaly
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnomalyAccess().getGroup()); }
(rule__Anomaly__Group__0)
{ after(grammarAccess.getAnomalyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Anomaly__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Anomaly__Group__0__Impl
	rule__Anomaly__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Anomaly__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnomalyAccess().getPropertyKeyword_0()); }

	'Property' 

{ after(grammarAccess.getAnomalyAccess().getPropertyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Anomaly__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Anomaly__Group__1__Impl
	rule__Anomaly__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Anomaly__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnomalyAccess().getNameAssignment_1()); }
(rule__Anomaly__NameAssignment_1)
{ after(grammarAccess.getAnomalyAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Anomaly__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Anomaly__Group__2__Impl
	rule__Anomaly__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Anomaly__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnomalyAccess().getDescriptionKeyword_2()); }

	'Description' 

{ after(grammarAccess.getAnomalyAccess().getDescriptionKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Anomaly__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Anomaly__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Anomaly__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnomalyAccess().getDescrAssignment_3()); }
(rule__Anomaly__DescrAssignment_3)
{ after(grammarAccess.getAnomalyAccess().getDescrAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__AnomaliesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAnomaliesAnomalyParserRuleCall_0()); }
	ruleAnomaly{ after(grammarAccess.getModelAccess().getAnomaliesAnomalyParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Anomaly__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnomalyAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getAnomalyAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Anomaly__DescrAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnomalyAccess().getDescrSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getAnomalyAccess().getDescrSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


